{"version":3,"file":"test.js","sources":["src/utilities.ts","src/1_Core/_module.ts","src/1_Core/Arguments.ts","src/1_Core/End Value Caching.ts","src/1_Core/End Value Setting.ts","src/1_Core/Start Value Calculation.ts","src/1_Core/Unit Calculation.ts","src/2_Option/_module.ts","src/2_Option/Option Begin.ts","src/2_Option/Option Complete.ts","src/2_Option/Option Delay.ts","src/2_Option/Option Duration.ts","src/2_Option/Option Easing.ts","src/2_Option/Option Fps Limit.ts","src/2_Option/Option Loop.ts","src/2_Option/Option Progress.ts","src/2_Option/Option Queue.ts","src/2_Option/Option Repeat.ts","src/2_Option/Option Speed.ts","src/2_Option/Option Sync.ts","src/3_Command/_module.ts","src/3_Command/Command Finish.ts","src/3_Command/Command Pause + Resume.ts","src/3_Command/Command Reverse.ts","src/3_Command/Command Scroll.ts","src/3_Command/Command Stop.ts","src/3_Command/Command Tween.ts","src/4_Feature/_module.ts","src/4_Feature/Feature Classname.ts","src/4_Feature/Feature Colors.ts","src/4_Feature/Feature Forcefeeding.ts","src/4_Feature/Feature Promises.ts","src/4_Feature/Feature Sequences.ts","src/4_Feature/Feature Value Functions.ts","src/5_UIPack/_module.ts","src/5_UIPack/Packaged Effect slideUp+Down.ts","src/5_UIPack/UI Pack Call Options.ts","src/5_UIPack/UI Pack Callbacks.ts","src/5_UIPack/UI Pack In+Out.ts","src/5_UIPack/UI Pack RegisterEffect.ts","src/5_UIPack/UI Pack RunSequence.ts","src/6_Properties/_module.ts","src/6_Properties/Normalization property value reordering.ts","src/6_Properties/Property Display.ts","src/6_Properties/Property Visibility.ts"],"sourcesContent":["/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {ElementData, VelocityOptions, VelocityProperties} from \"velocity-animate\";\r\n\r\ndeclare global {\r\n\tinterface QUnit {\r\n\t\ttodo(name: string, callback: (assert: Assert) => void): void;\r\n\t}\r\n\r\n\tinterface Assert {\r\n\t\tclose: {\r\n\t\t\t(actual: number, expected: number, maxDifference: number, message: string): void;\r\n\t\t\tpercent(actual: number, expected: number, maxPercentDifference: number, message: string): void;\r\n\t\t};\r\n\t\tnotClose: {\r\n\t\t\t(actual: number, expected: number, minDifference: number, message: string): void;\r\n\t\t\tpercent(actual: number, expected: number, minPercentDifference: number, message: string): void;\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport const $ = ((window as any).jQuery || (window as any).Zepto),\r\n\t$qunitStage = document.getElementById(\"qunit-stage\"),\r\n\tdefaultStyles = {\r\n\t\topacity: 1,\r\n\t\twidth: 1,\r\n\t\theight: 1,\r\n\t\tmarginBottom: 1,\r\n\t\tcolorGreen: 200,\r\n\t\ttextShadowBlur: 3,\r\n\t},\r\n\tdefaultProperties: VelocityProperties = {\r\n\t\topacity: String(defaultStyles.opacity / 2),\r\n\t\twidth: defaultStyles.width * 2 + \"px\",\r\n\t\theight: defaultStyles.height * 2 + \"px\",\r\n\t},\r\n\tdefaultOptions: VelocityOptions = {\r\n\t\tqueue: \"\",\r\n\t\tduration: 300,\r\n\t\teasing: \"swing\",\r\n\t\tbegin: null,\r\n\t\tcomplete: null,\r\n\t\tprogress: null,\r\n\t\tloop: false,\r\n\t\tdelay: 0,\r\n\t\tmobileHA: true,\r\n\t},\r\n\tasyncCheckDuration = (defaultOptions.duration as number) / 2,\r\n\tcompleteCheckDuration = (defaultOptions.duration as number) * 2,\r\n\tIE = (() => {\r\n\t\tif ((document as any).documentMode) {\r\n\t\t\treturn (document as any).documentMode as number;\r\n\t\t} else {\r\n\t\t\tfor (let i = 7; i > 0; i--) {\r\n\t\t\t\tlet div = document.createElement(\"div\");\r\n\r\n\t\t\t\tdiv.innerHTML = `<!${\"--\"}[if IE ${i}]><span></span><![endif]-->`;\r\n\t\t\t\tif (div.getElementsByTagName(\"span\").length) {\r\n\t\t\t\t\tdiv = null;\r\n\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t\tdiv = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t})();\r\n\r\nconst targets: HTMLDivElement[] = [];\r\nlet asyncCount = 0;\r\n\r\nQUnit.config.reorder = false;\r\n\r\nexport function applyStartValues(element: HTMLElement, startValues: {[name: string]: string}) {\r\n\t$.each(startValues, (property, startValue) => {\r\n\t\telement.style[property] = startValue;\r\n\t});\r\n}\r\n\r\nexport function Data(element): ElementData {\r\n\treturn (element.jquery ? element[0] : element).velocityData;\r\n}\r\n\r\nexport function getNow(): number {\r\n\treturn performance && performance.now ? performance.now() : Date.now();\r\n}\r\n\r\nexport function getPropertyValue(element: HTMLElement, property: string): string {\r\n\treturn Velocity(element, \"style\", property);\r\n}\r\n\r\nexport function getTarget(startValues?: {[name: string]: string}): HTMLDivElement {\r\n\tconst div = document.createElement(\"div\") as HTMLDivElement;\r\n\r\n\tdiv.className = \"target\";\r\n\tdiv.style.opacity = String(defaultStyles.opacity);\r\n\tdiv.style.color = `rgb(125, ${defaultStyles.colorGreen}, 125)`;\r\n\tdiv.style.width = defaultStyles.width + \"px\";\r\n\tdiv.style.height = defaultStyles.height + \"px\";\r\n\tdiv.style.marginBottom = defaultStyles.marginBottom + \"px\";\r\n\tdiv.style.textShadow = `0px 0px ${defaultStyles.textShadowBlur}px red`;\r\n\t$qunitStage.appendChild(div);\r\n\ttargets.push(div);\r\n\tif (startValues) {\r\n\t\tapplyStartValues(div, startValues);\r\n\t}\r\n\r\n\treturn div;\r\n}\r\n\r\nexport function once(func): typeof func {\r\n\tlet done: boolean,\r\n\t\tresult: any;\r\n\r\n\treturn function(this: any) {\r\n\t\tif (!done) {\r\n\t\t\tresult = func.apply(this, arguments);\r\n\t\t\tfunc = done = true; // Don't care about type, just let the GC collect if possible\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n}\r\n\r\nexport function sleep(ms: number) {\r\n\treturn new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n/**\r\n * Create an asyn callback. Each callback must be independant of all others, and\r\n * gets it's own unique done() callback to use. This also requires a count of\r\n * the number of tests run, and the assert object used.\r\n * Call without any arguments to get a total count of tests requested.\r\n */\r\nexport function asyncTests(): number;\r\nexport function asyncTests(assert: Assert, count: number, callback: (done: () => void) => void): void;\r\nexport function asyncTests(assert?: Assert, count?: number, callback?: (done: () => void) => void): number {\r\n\tif (!assert) {\r\n\t\tconst oldCount = asyncCount;\r\n\r\n\t\tasyncCount = 0;\r\n\r\n\t\treturn oldCount;\r\n\t}\r\n\tconst done = assert.async(1);\r\n\r\n\tasyncCount += count;\r\n\tsetTimeout(() => {\r\n\t\tcallback(done);\r\n\t}, 1);\r\n}\r\n\r\nexport function isEmptyObject(variable): variable is {} {\r\n\tfor (const name in variable) {\r\n\t\tif (variable.hasOwnProperty(name)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nQUnit.testDone(() => {\r\n\ttry {\r\n\t\tdocument.querySelectorAll(\".velocity-animating\")\r\n\t\t\t.velocity(\"stop\");\r\n\t} catch {\r\n\t\t// We don't care if it fails.\r\n\t}\r\n\t// Free all targets requested by the current test.\r\n\twhile (targets.length) {\r\n\t\ttry {\r\n\t\t\t$qunitStage.removeChild(targets.pop());\r\n\t\t} catch {\r\n\t\t\t// We don't care if it fails.\r\n\t\t}\r\n\t}\r\n\t// Ensure we have reset the test counter.\r\n\tasyncTests();\r\n\t// Make sure Velocity goes back to defaults.\r\n\tVelocity.defaults.reset();\r\n});\r\n\r\n/* Cleanup */\r\nQUnit.done((details) => {\r\n\t//\t$(\".velocity-animating\").velocity(\"stop\");\r\n\tconsole.log(\"Total: \", details.total, \" Failed: \", details.failed, \" Passed: \", details.passed, \" Runtime: \", details.runtime);\r\n});\r\n\r\n/* Helpful redirect for testing custom and parallel queues. */\r\n// var $div2 = $(\"#DataBody-PropertiesDummy\");\r\n// $.fn.velocity.defaults.duration = 1000;\r\n// $div2.velocity(\"scroll\", { queue: \"test\" })\r\n// $div2.velocity({width: 100}, { queue: \"test\" })\r\n// $div2.velocity({ borderWidth: 50 }, { queue: \"test\" })\r\n// $div2.velocity({height: 20}, { queue: \"test\" })\r\n// $div2.velocity({marginLeft: 200}, { queue: \"test\" })\r\n// $div2.velocity({paddingTop: 60});\r\n// $div2.velocity({marginTop: 100});\r\n// $div2.velocity({paddingRight: 40});\r\n// $div2.velocity({marginTop: 0})\r\n// $div2.dequeue(\"test\")\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"Core\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityOptions, VelocityResult} from \"velocity-animate\";\r\nimport {Data, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Arguments\", (assert) => {\r\n\tconst testComplete = () => {\r\n\t\t// Do nothing\r\n\t},\r\n\t\ttestDuration = 1000,\r\n\t\ttestEasing = \"easeInSine\",\r\n\t\ttestOptions: VelocityOptions = {\r\n\t\t\tduration: 123,\r\n\t\t\teasing: testEasing,\r\n\t\t\tcomplete: testComplete,\r\n\t\t};\r\n\tlet result: VelocityResult;\r\n\r\n\tassert.expect(18);\r\n\r\n\t/****************\r\n\t Overloading\r\n\t ****************/\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties);\r\n\tassert.ok(result.length,\r\n\t\t\"Overload variation #1a: Velocity(ELEMENT, {properties})\");\r\n\tassert.ok(result.velocity.animations.length,\r\n\t\t\"Overload variation #1b: Velocity(element, {PROPERTIES})\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testDuration);\r\n\tassert.equal(result.velocity.animations[0].options.duration, testDuration,\r\n\t\t\"Overload variation #2a: Velocity(element, {properties}, DURATION<number>)\");\r\n\tresult = Velocity(getTarget(), defaultProperties, \"slow\");\r\n\tassert.equal(result.velocity.animations[0].options.duration, 600,\r\n\t\t\"Overload variation #2b: Velocity(element, {properties}, DURATION<slow>)\");\r\n\tresult = Velocity(getTarget(), defaultProperties, \"normal\");\r\n\tassert.equal(result.velocity.animations[0].options.duration, 400,\r\n\t\t\"Overload variation #2c: Velocity(element, {properties}, DURATION<normal>)\");\r\n\tresult = Velocity(getTarget(), defaultProperties, \"fast\");\r\n\tassert.equal(result.velocity.animations[0].options.duration, 200,\r\n\t\t\"Overload variation #2d: Velocity(element, {properties}, DURATION<fast>)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testEasing);\r\n\tassert.equal(typeof result.velocity.animations[0].options.easing, \"function\",\r\n\t\t\"Overload variation #3: Velocity(element, {properties}, EASING)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testComplete);\r\n\tassert.equal(typeof result.velocity.animations[0].options.complete, \"function\",\r\n\t\t\"Overload variation #4: Velocity(element, {properties}, COMPLETE)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testDuration, [0.42, 0, 0.58, 1]);\r\n\tassert.equal(result.velocity.animations[0].options.duration, testDuration,\r\n\t\t\"Overload variation #5a: Velocity(element, {properties}, DURATION, easing)\");\r\n\tassert.equal(result.velocity.animations[0].options.easing(0.2, 0, 1), 0.0816598562658975,\r\n\t\t\"Overload variation #5b: Velocity(element, {properties}, duration, EASING)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testDuration, testComplete);\r\n\tassert.equal(result.velocity.animations[0].options.duration, testDuration,\r\n\t\t\"Overload variation #6a: Velocity(element, {properties}, DURATION, complete)\");\r\n\tassert.equal(result.velocity.animations[0].options.complete, testComplete,\r\n\t\t\"Overload variation #6b: Velocity(element, {properties}, duration, COMPLETE)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testDuration, testEasing, testComplete);\r\n\tassert.equal(result.velocity.animations[0].options.duration, testDuration,\r\n\t\t\"Overload variation #7a: Velocity(element, {properties}, DURATION, easing, complete)\");\r\n\tassert.equal(typeof result.velocity.animations[0].options.easing, \"function\",\r\n\t\t\"Overload variation #7b: Velocity(element, {properties}, duration, EASING, complete)\");\r\n\tassert.equal(result.velocity.animations[0].options.complete, testComplete,\r\n\t\t\"Overload variation #7c: Velocity(element, {properties}, duration, easing, COMPLETE)\");\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, testOptions);\r\n\tassert.equal(result.velocity.animations[0].options.duration, testOptions.duration,\r\n\t\t\"Overload variation #8: Velocity(element, {properties}, {OPTIONS})\");\r\n\r\n\tVelocity({elements: [getTarget()], properties: defaultProperties, options: testOptions});\r\n\tassert.equal(result.velocity.animations[0].options.duration, testOptions.duration,\r\n\t\t\"Overload variation #9: Velocity({elements:[elements], properties:{properties}, options:{OPTIONS})\");\r\n\r\n\tVelocity({elements: [getTarget()], properties: \"stop\", options: testOptions});\r\n\tassert.equal(result.velocity.animations[0].options.duration, testOptions.duration,\r\n\t\t\"Overload variation #10: Velocity({elements:[elements], properties:\\\"ACTION\\\", options:{OPTIONS})\");\r\n\r\n\t//\tvar $target12 = getTarget();\r\n\t//\tVelocity($target12, {opacity: [0.75, \"spring\", 0.25]}, testDuration);\r\n\t//\tassert.equal(Data($target12).style.opacity.startValue, 0.25, \"Overload variation #10a.\");\r\n\t//\tassert.equal(Data($target12).style.opacity.easing, \"spring\", \"Overload variation #10b.\");\r\n\t//\tassert.equal(Data($target12).style.opacity.endValue, 0.75, \"Overload variation #10c.\");\r\n\r\n\t//\tvar $target13 = getTarget();\r\n\t//\tVelocity($target13, {opacity: [0.75, 0.25]}, testDuration);\r\n\t//\tassert.equal(Data($target13).style.opacity.startValue, 0.25, \"Overload variation #11a.\");\r\n\t//\tassert.equal(Data($target13).style.opacity.endValue, 0.75, \"Overload variation #11b.\");\r\n\r\n\t//\tvar $target14 = getTarget();\r\n\t//\tVelocity($target14, {opacity: [0.75, \"spring\"]}, testDuration);\r\n\t//\tassert.equal(Data($target14).style.opacity.endValue, 0.75, \"Overload variation #12a.\");\r\n\t//\tassert.equal(Data($target14).style.opacity.easing, \"spring\", \"Overload variation #12b.\");\r\n\r\n\t//\tif ($) {\r\n\t//\t\tvar $target17 = getTarget();\r\n\t//\t\t$($target17).velocity(defaultProperties, testOptions);\r\n\t//\t\tassert.deepEqual(Data($target17).opts, testOptions, \"$.fn.: Utility function variation #1: options object.\");\r\n\t//\r\n\t//\t\tvar $target18 = getTarget();\r\n\t//\t\t$($target18).velocity({properties: defaultProperties, options: testOptions});\r\n\t//\t\tassert.deepEqual(Data($target18).opts, testOptions, \"$.fn.: Utility function variation #2: single object.\");\r\n\t//\r\n\t//\t\tvar $target19 = getTarget();\r\n\t//\t\t$($target19).velocity(defaultProperties, testDuration, testEasing, testComplete);\r\n\t//\t\tassert.equal(Data($target19).opts.duration, testDuration, \"$.fn.: Utility function variation #2a.\");\r\n\t//\t\tassert.equal(Data($target19).opts.easing, testEasing, \"$.fn.: Utility function variation #2b.\");\r\n\t//\t\tassert.equal(Data($target19).opts.complete, testComplete, \"$.fn.: Utility function variation #2c.\");\r\n\t//\r\n\t//\t\tvar $target20 = getTarget();\r\n\t//\t\tassert.equal($($target20).length, $($target20).velocity(defaultProperties, testDuration, testEasing, testComplete)\r\n\t//\t\t.velocity(defaultProperties, testDuration, testEasing, testComplete).length, \"$.fn.: Elements passed back to the call stack.\");\r\n\t//\t\t// TODO: Should check in a better way - but the prototype chain is now extended with a Promise so a standard (non-length) comparison *will* fail\r\n\t//\t}\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {Data, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"End Value Caching\", (assert) => {\r\n\tconst done = assert.async(2),\r\n\t\tnewProperties = {height: \"50px\", width: \"250px\"};\r\n\r\n\tassert.expect(4);\r\n\r\n\t/* Called after the last call is complete (stale). Ensure that the newly-set (via $.css()) properties are used. */\r\n\tVelocity(getTarget(newProperties), defaultProperties)\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(Data(elements[0]).cache.width, defaultProperties.width, \"Stale end value #1 wasn't pulled.\");\r\n\t\t\tassert.equal(Data(elements[0]).cache.height, defaultProperties.height, \"Stale end value #2 wasn't pulled.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), defaultProperties)\r\n\t\t.velocity(newProperties)\r\n\t\t.then((elements) => {\r\n\t\t\t/* Chained onto a previous call (fresh). */\r\n\t\t\tassert.equal(Data(elements[0]).cache.width, newProperties.width, \"Chained end value #1 was pulled.\");\r\n\t\t\tassert.equal(Data(elements[0]).cache.height, newProperties.height, \"Chained end value #2 was pulled.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {Data, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"End Value Setting\", (assert) => {\r\n\tconst done = assert.async(1);\r\n\r\n\t/* Standard properties. */\r\n\tVelocity(getTarget(), defaultProperties)\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(Velocity(elements[0], \"style\", \"width\"), defaultProperties.width, \"Standard end value #1 was set.\");\r\n\t\t\tassert.equal(Velocity(elements[0], \"style\", \"opacity\"), defaultProperties.opacity, \"Standard end value #2 was set.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {$qunitStage, applyStartValues, Data, defaultProperties, defaultStyles, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.todo(\"Start Value Calculation\", (assert) => {\r\n\tconst testStartValues = {\r\n\t\tpaddingLeft: \"10px\",\r\n\t\theight: \"100px\",\r\n\t\tpaddingRight: \"50%\",\r\n\t\tmarginLeft: \"100px\",\r\n\t\tmarginBottom: \"33%\",\r\n\t\tmarginTop: \"100px\",\r\n\t\tlineHeight: \"30px\",\r\n\t\twordSpacing: \"40px\",\r\n\t\tbackgroundColor: \"rgb(123,0,0)\",\r\n\t};\r\n\r\n\t/* Properties not previously defined on the element. */\r\n\tconst $target1 = getTarget();\r\n\r\n\tVelocity($target1, testStartValues);\r\n\tassert.equal(Data($target1).cache.paddingLeft, testStartValues.paddingLeft, \"Undefined standard start value was calculated.\");\r\n\tassert.equal(Data($target1).cache.backgroundColor, testStartValues.backgroundColor, \"Undefined start value hook was calculated.\");\r\n\r\n\t/* Properties previously defined on the element. */\r\n\tconst $target2 = getTarget();\r\n\r\n\tVelocity($target2, defaultProperties);\r\n\tassert.equal(Data($target2).cache.width, parseFloat(defaultStyles.width as any), \"Defined start value #1 was calculated.\");\r\n\tassert.equal(Data($target2).cache.opacity, parseFloat(defaultStyles.opacity as any), \"Defined start value #2 was calculated.\");\r\n\tassert.equal(Data($target2).cache.color, parseFloat(defaultStyles.colorGreen as any), \"Defined hooked start value was calculated.\");\r\n\r\n\t/* Properties that shouldn't cause start values to be unit-converted. */\r\n\tconst testPropertiesEndNoConvert = {paddingLeft: \"20px\", height: \"40px\", paddingRight: \"75%\"},\r\n\t\t$target3 = getTarget();\r\n\r\n\tapplyStartValues($target3, testStartValues);\r\n\tVelocity($target3, testPropertiesEndNoConvert);\r\n\tassert.equal(Data($target3).cache.paddingLeft, parseFloat(testStartValues.paddingLeft), \"Start value #1 wasn't unit converted.\");\r\n\tassert.equal(Data($target3).cache.height, parseFloat(testStartValues.height), \"Start value #2 wasn't unit converted.\");\r\n\t//\t\t\tassert.deepEqual(Data($target3).cache.paddingRight.startValue, [Math.floor((parentWidth * parseFloat(testStartValues.paddingRight)) / 100), 0],\r\n\t//\t\t\t \"Start value #3 was pattern matched.\");\r\n\r\n\t/* Properties that should cause start values to be unit-converted. */\r\n\tconst testPropertiesEndConvert = {paddingLeft: \"20%\", height: \"40%\", lineHeight: \"0.5em\", wordSpacing: \"2rem\", marginLeft: \"10vw\", marginTop: \"5vh\", marginBottom: \"100px\"},\r\n\t\tparentWidth = $qunitStage.clientWidth,\r\n\t\tparentHeight = $qunitStage.clientHeight,\r\n\t\tparentFontSize = Velocity($qunitStage, \"style\", \"fontSize\"),\r\n\t\tremSize = parseFloat(Velocity(document.body, \"style\", \"fontSize\") as any),\r\n\t\t$target4 = getTarget();\r\n\r\n\tapplyStartValues($target4, testStartValues);\r\n\tVelocity($target4, testPropertiesEndConvert);\r\n\r\n\t/* Long decimal results can be returned after unit conversion, and Velocity's code and the code here can differ in precision. So, we round floor values before comparison. */\r\n\t//\t\t\tassert.deepEqual(Data($target4).cache.paddingLeft.startValue, [parseFloat(testStartValues.paddingLeft), 0],\r\n\t//\t\t\t \"Horizontal property converted to %.\");\r\n\tassert.equal(parseInt(Data($target4).cache.height, 10), Math.floor((parseFloat(testStartValues.height) / parentHeight) * 100), \"Vertical property converted to %.\");\r\n\t//\t\t\tassert.equal(Data($target4).cache.lineHeight.startValue, Math.floor(parseFloat(testStartValues.lineHeight) / parseFloat(parentFontSize)),\r\n\t//\t\t\t \"Property converted to em.\");\r\n\t//\t\t\tassert.equal(Data($target4).cache.wordSpacing.startValue, Math.floor(parseFloat(testStartValues.wordSpacing) / parseFloat(remSize)),\r\n\t//\t\t\t \"Property converted to rem.\");\r\n\tassert.equal(parseInt(Data($target4).cache.marginBottom, 10), parseFloat(testStartValues.marginBottom) / 100 * parseFloat($target4.parentElement.offsetWidth as any),\r\n\t\t\"Property converted to px.\");\r\n\r\n\t//\t\t\tif (!(IE<=8) && !isAndroid) {\r\n\t//\t\t\t\tassert.equal(Data($target4).cache.marginLeft.startValue, Math.floor(parseFloat(testStartValues.marginLeft) / window.innerWidth * 100),\r\n\t//\t\t\t\t \"Horizontal property converted to vw.\");\r\n\t//\t\t\t\tassert.equal(Data($target4).cache.marginTop.startValue, Math.floor(parseFloat(testStartValues.marginTop) / window.innerHeight * 100),\r\n\t//\t\t\t\t \"Vertical property converted to vh.\");\r\n\t//\t\t\t}\r\n\r\n\t// TODO: Tests for auto-parameters as the units are no longer converted.\r\n\r\n\t/* jQuery TRBL deferring. */\r\n\tconst testPropertiesTRBL = {left: \"1000px\"},\r\n\t\t$TRBLContainer = document.createElement(\"div\");\r\n\r\n\t$TRBLContainer.setAttribute(\"id\", \"TRBLContainer\");\r\n\t$TRBLContainer.style.marginLeft = testPropertiesTRBL.left;\r\n\t$TRBLContainer.style.width = \"100px\";\r\n\t$TRBLContainer.style.height = \"100px\";\r\n\tdocument.body.appendChild($TRBLContainer);\r\n\r\n\tconst $target5 = getTarget();\r\n\r\n\t$target5.style.position = \"absolute\";\r\n\t$TRBLContainer.appendChild($target5);\r\n\tVelocity($target5, testPropertiesTRBL);\r\n\r\n\tassert.equal(parseInt(Data($target5).cache.left, 10),\r\n\t\tMath.round(parseFloat(testPropertiesTRBL.left) + parseFloat(Velocity(document.body, \"style\", \"marginLeft\") as any)),\r\n\t\t\"TRBL value was deferred to jQuery.\");\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, getPropertyValue, getTarget, sleep} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Unit Calculation\", (assert) => {\r\n\t// TODO: Add code and tests for operators - probably using calc() internally\r\n\t//\t/* Standard properties with operators. */\r\n\t//\tvar testIncrementWidth = \"5px\",\r\n\t//\t\t\ttestDecrementOpacity = 0.25,\r\n\t//\t\t\ttestMultiplyMarginBottom = 4,\r\n\t//\t\t\ttestDivideHeight = 2;\r\n\t//\r\n\t//\tvar $target2 = getTarget();\r\n\t//\tVelocity($target2, {width: \"+=\" + testIncrementWidth, opacity: \"-=\" + testDecrementOpacity, marginBottom: \"*=\" + testMultiplyMarginBottom, height: \"/=\" + testDivideHeight});\r\n\t//\tsetTimeout(function() {\r\n\t//\r\n\t//\t\tassert.equal(Data($target2).style.width.endValue, defaultStyles.width + parseFloat(testIncrementWidth), \"Incremented end value was calculated.\");\r\n\t//\t\tassert.equal(Data($target2).style.opacity.endValue, defaultStyles.opacity - testDecrementOpacity, \"Decremented end value was calculated.\");\r\n\t//\t\tassert.equal(Data($target2).style.marginBottom.endValue, defaultStyles.marginBottom * testMultiplyMarginBottom, \"Multiplied end value was calculated.\");\r\n\t//\t\tassert.equal(Data($target2).style.height.endValue, defaultStyles.height / testDivideHeight, \"Divided end value was calculated.\");\r\n\t//\r\n\t//\t\tdone();\r\n\t//\t}, asyncCheckDuration);\r\n\r\n\tasyncTests(assert, 2, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {left: \"500px\"}, {duration: 10});\r\n\t\tawait sleep(100);\r\n\t\tassert.equal(getPropertyValue($target, \"left\"), \"500px\", \"Finished animated value with given pixels should be the same.\");\r\n\t\tVelocity($target, {left: \"0px\"}, {duration: 10});\r\n\t\tawait sleep(100);\r\n\t\tassert.equal(getPropertyValue($target, \"left\"), \"0px\", \"Finished animated value with 0px should be the same.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\t//\tasync(assert, 1, async (done) => {\r\n\t//\t\tconst $target = getTarget();\r\n\t//\r\n\t//\t\tVelocity($target, {left: \"500px\"}, {duration: 10});\r\n\t//\t\tawait sleep(100);\r\n\t//\t\tVelocity($target, {left: \"0\"}, {duration: 10});\r\n\t//\t\tawait sleep(100);\r\n\t//\t\tassert.equal(getPropertyValue($target, \"left\"), \"0px\", \"Finished animated value without giving px, but only number as a string should be the same.\");\r\n\t//\r\n\t//\t\tdone();\r\n\t//\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {left: \"500px\"}, {duration: 10});\r\n\t\tawait sleep(100);\r\n\t\tVelocity($target, {left: 0}, {duration: 10});\r\n\t\tawait sleep(1000);\r\n\t\tassert.equal(getPropertyValue($target, \"left\"), \"0px\", \"Finished animated value given as number 0 should be the same as 0px.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 2, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {left: 500}, {duration: 10});\r\n\t\tawait sleep(100);\r\n\t\tassert.equal(getPropertyValue($target, \"left\"), \"500px\", \"Finished animated value with given pixels should be the same.\");\r\n\t\tVelocity($target, {left: 0}, {duration: 10});\r\n\t\tawait sleep(100);\r\n\t\tassert.equal(getPropertyValue($target, \"left\"), \"0px\", \"Omitted pixels (px) when given animation should run properly.\");\r\n\r\n\t\tdone();\r\n\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"Option\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Begin\", (assert) => {\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst $targetSet = [getTarget(), getTarget()];\r\n\r\n\t\tVelocity($targetSet, defaultProperties, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tbegin(elements) {\r\n\t\t\t\tassert.deepEqual(elements, $targetSet, \"Elements passed into callback.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Complete\", (assert) => {\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst $targetSet = [getTarget(), getTarget()];\r\n\r\n\t\tVelocity($targetSet, defaultProperties, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.deepEqual(elements, $targetSet, \"Elements passed into callback.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultOptions, defaultProperties, getNow, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Delay\", (assert) => {\r\n\tconst testDelay = 250;\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst start = getNow();\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration: defaultOptions.duration,\r\n\t\t\tdelay: testDelay,\r\n\t\t\tbegin(elements, activeCall) {\r\n\t\t\t\tassert.close(getNow() - start, testDelay, 32, \"Delayed calls start after the correct delay.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst start = getNow();\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration: defaultOptions.duration,\r\n\t\t\tdelay: testDelay,\r\n\t\t})\r\n\t\t\t.velocity(defaultProperties, {\r\n\t\t\t\tduration: defaultOptions.duration,\r\n\t\t\t\tdelay: testDelay,\r\n\t\t\t\tbegin(elements, activeCall) {\r\n\t\t\t\t\tassert.close(getNow() - start, (testDelay * 2) + (defaultOptions.duration as number), 32, \"Chained delays start after the correct delay.\");\r\n\r\n\t\t\t\t\tdone();\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultOptions, defaultProperties, getNow, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Duration\", (assert) => {\r\n\tconst testDuration = Velocity.defaults.duration as number;\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst start = getNow();\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration: testDuration,\r\n\t\t\tcomplete(elements, activeCall) {\r\n\t\t\t\tconst time = getNow() - start;\r\n\r\n\t\t\t\tassert.close(time, testDuration, 32, `Calls run for the correct duration (~${Math.floor(time)}ms / ${testDuration}ms).`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst start = getNow();\r\n\r\n\t\tVelocity(getTarget(), {width: [\"200px\", \"500px\"]}, {\r\n\t\t\tduration: testDuration,\r\n\t\t})\r\n\t\t\t.velocity({width: [\"500px\", \"200px\"]}, {\r\n\t\t\t\tduration: testDuration,\r\n\t\t\t\tcomplete(elements, activeCall) {\r\n\t\t\t\t\tconst time = getNow() - start;\r\n\r\n\t\t\t\t\tassert.close(getNow() - start, testDuration * 2, 32, `Chained durations run for the correct duration (~${Math.floor(time)}ms / ${testDuration * 2}ms).`);\r\n\r\n\t\t\t\t\tdone();\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst start = getNow();\r\n\r\n\t\tVelocity(getTarget(), {width: [\"200px\", \"500px\"]})\r\n\t\t\t.velocity({width: [\"500px\", \"200px\"]})\r\n\t\t\t.then(() => {\r\n\t\t\t\tconst time = getNow() - start;\r\n\r\n\t\t\t\tassert.close(getNow() - start, testDuration * 2, 32, `Chained durations with defaults run for the correct duration (~${Math.floor(time)}ms / ${testDuration * 2}ms).`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityResult} from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget, once} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Easing\", (assert) => {\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tlet success = false;\r\n\r\n\t\ttry {\r\n\t\t\tsuccess = true;\r\n\t\t\tVelocity(getTarget(), defaultProperties, {easing: \"fake\"});\r\n\t\t} catch (e) {\r\n\t\t\tsuccess = false;\r\n\t\t}\r\n\t\tassert.ok(success, \"Fake easing string didn't throw error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tlet success = false;\r\n\r\n\t\ttry {\r\n\t\t\tsuccess = true;\r\n\t\t\tVelocity(getTarget(), defaultProperties, {easing: [\"a\" as any, 0.5, 0.5, 0.5]});\r\n\t\t\tVelocity(getTarget(), defaultProperties, {easing: [0.5, 0.5, 0.5]});\r\n\t\t} catch (e) {\r\n\t\t\tsuccess = false;\r\n\t\t}\r\n\t\tassert.ok(success, \"Invalid bezier curve didn't throw error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\t// TODO: Use a \"tween\" action?\r\n\t\t/* Ensure that a properly-formatted bezier curve array returns a bezier function. */\r\n\t\tconst easingBezierArray = [0.27, -0.65, 0.78, 0.19],\r\n\t\t\teasingBezierTestPercent = 0.25,\r\n\t\t\teasingBezierTestValue = -0.23;\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\teasing: easingBezierArray,\r\n\t\t\tbegin(elements, animation) {\r\n\t\t\t\tassert.close(animation.options.easing(easingBezierTestPercent, 0, 1), easingBezierTestValue, 0.005, \"Array converted into bezier function.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\t/* Ensure that a properly-formatted spring RK4 array returns a bezier function. */\r\n\t\tconst easingSpringRK4Array = [250, 12],\r\n\t\t\teasingSpringRK4TestPercent = 0.25,\r\n\t\t\teasingSpringRK4TestValue = 0.928, // TODO: Check accuracy\r\n\t\t\teasingSpringRK4TestDuration = 992;\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration: 150,\r\n\t\t\teasing: easingSpringRK4Array,\r\n\t\t\tbegin(elements, animation) {\r\n\t\t\t\tassert.close(animation.options.easing(easingSpringRK4TestPercent, 0, 1), easingSpringRK4TestValue, 10, \"Array with duration converted into springRK4 function.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\t// TODO: Get this working in Velocity - so it can be tested\r\n\t//\tasync(assert, 1, (done) => {\r\n\t//\tVelocity(getTarget(), defaultProperties, {\r\n\t//\t\teasing: easingSpringRK4Array,\r\n\t//\t\tbegin(elements, animation) {\r\n\t//\t\t\tassert.equal(animation.duration, easingSpringRK4TestDuration, \"Array without duration converted into springRK4 duration.\");\r\n\t//\t\t\tdone();\r\n\t//\t\t}\r\n\t//\t});\r\n\t//\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\t/* Ensure that a properly-formatted step easing array returns a step function. */\r\n\t\tconst easingStepArray = [4],\r\n\t\t\teasingStepTestPercent = 0.35,\r\n\t\t\teasingStepTestValue = 0.25;\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\teasing: easingStepArray,\r\n\t\t\tbegin(elements, animation) {\r\n\t\t\t\tassert.close(animation.options.easing(easingStepTestPercent, 0, 1), easingStepTestValue, 0.05, \"Array converted into Step function.\");\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 3, (done) => {\r\n\t\tVelocity(getTarget(), {opacity: [0, \"during\", 1]}, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tbegin(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 1, \"Correct begin value (easing:'during').\");\r\n\t\t\t},\r\n\t\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 0, \"Correct progress value (easing:'during').\");\r\n\t\t\t}),\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 1, \"Correct complete value (easing:'during').\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 3, (done) => {\r\n\t\tVelocity(getTarget(), {opacity: [0, \"at-start\", 1]}, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tbegin(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 1, \"Correct begin value (easing:'at-start').\");\r\n\t\t\t},\r\n\t\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 0, \"Correct progress value (easing:'at-start').\");\r\n\t\t\t}),\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 0, \"Correct complete value (easing:'at-start').\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 3, (done) => {\r\n\t\tVelocity(getTarget(), {opacity: [0, \"at-end\", 1]}, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tbegin(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 1, \"Correct begin value (easing:'at-end').\");\r\n\t\t\t},\r\n\t\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 1, \"Correct progress value (easing:'at-end').\");\r\n\t\t\t}),\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"opacity\"), 0, \"Correct complete value (easing:'at-end').\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"FPS Limit\", async (assert) => {\r\n\tlet count: number;\r\n\tconst $target = getTarget(),\r\n\t\tframeRates = [5, 15, 30, 60],\r\n\t\ttestFrame = (frameRate) => {\r\n\t\t\tlet counter = 0;\r\n\r\n\t\t\tVelocity.defaults.fpsLimit = frameRate;\r\n\t\t\t// Test if the frame rate is assigned succesfully.\r\n\t\t\tassert.equal(frameRate, Velocity.defaults.fpsLimit, \"Setting global fps limit to \" + frameRate);\r\n\r\n\t\t\treturn Velocity($target, defaultProperties,\r\n\t\t\t\t{\r\n\t\t\t\t\tduration: 1000,\r\n\t\t\t\t\tprogress() {\r\n\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => counter);\r\n\t\t};\r\n\r\n\tassert.expect(frameRates.length * 2);\r\n\t// Test if the limit is working for 60, 30, 15 and 5 fps.\r\n\tfor (const frameRate of frameRates) {\r\n\t\tassert.ok((count = await testFrame(frameRate)) <= frameRate + 1, `...counted ${count} frames (\\xB11 frame)`);\r\n\t}\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultProperties, getNow, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Loop\", (assert) => {\r\n\tasyncTests(assert, 4, (done) => {\r\n\t\tconst testOptions = {loop: 2, delay: 100, duration: 100},\r\n\t\t\tstart = getNow();\r\n\t\tlet begin = 0,\r\n\t\t\tcomplete = 0,\r\n\t\t\tloop = 0,\r\n\t\t\tlastPercentComplete = 2;\r\n\r\n\t\tVelocity(getTarget(), defaultProperties,\r\n\t\t\t{\r\n\t\t\t\tloop: testOptions.loop,\r\n\t\t\t\tdelay: testOptions.delay,\r\n\t\t\t\tduration: testOptions.duration,\r\n\t\t\t\tbegin() {\r\n\t\t\t\t\tbegin++;\r\n\t\t\t\t},\r\n\t\t\t\tprogress(elements, percentComplete) {\r\n\t\t\t\t\tif (lastPercentComplete > percentComplete) {\r\n\t\t\t\t\t\tloop++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastPercentComplete = percentComplete;\r\n\t\t\t\t},\r\n\t\t\t\tcomplete() {\r\n\t\t\t\t\tcomplete++;\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tassert.equal(begin, 1, \"Begin callback only called once.\");\r\n\t\t\t\tassert.equal(loop, testOptions.loop * 2 - 1, \"Animation looped correct number of times (once each direction per loop).\");\r\n\t\t\t\tassert.close(getNow() - start, (testOptions.delay + testOptions.duration) * loop, 32, \"Looping with 'delay' has correct duration.\");\r\n\t\t\t\tassert.equal(complete, 1, \"Complete callback only called once.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget, once} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Progress\", (assert) => {\r\n\tasyncTests(assert, 4, (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, defaultProperties, {\r\n\t\t\tduration: asyncCheckDuration,\r\n\t\t\tprogress: once(function(elements, percentComplete, msRemaining) { // tslint:disable-line:only-arrow-functions\r\n\t\t\t\tassert.deepEqual(elements, [$target], \"Elements passed into progress.\");\r\n\t\t\t\tassert.deepEqual(this, [$target], \"Elements passed into progress as this.\"); // tslint:disable-line:no-invalid-this\r\n\t\t\t\tassert.equal(percentComplete >= 0 && percentComplete <= 1, true, \"'percentComplete' passed into progress.\");\r\n\t\t\t\tassert.equal(msRemaining > asyncCheckDuration - 50, true, \"'msRemaining' passed into progress.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t}),\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {Data, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Queue\", (assert) => {\r\n\tconst done = assert.async(4),\r\n\t\ttestQueue = \"custom\",\r\n\t\t$target = getTarget(),\r\n\t\tignore = $target.velocity(\"style\", \"display\"), // Force data creation\r\n\t\tdata = Data($target);\r\n\tlet anim1: boolean,\r\n\t\tanim2: boolean,\r\n\t\tanim3: boolean;\r\n\r\n\tassert.expect(7);\r\n\r\n\tassert.ok(data.queueList[testQueue] === undefined, \"Custom queue is empty.\"); // Shouldn't exist\r\n\r\n\t$target.velocity(defaultProperties, {\r\n\t\tqueue: testQueue,\r\n\t\tbegin() {\r\n\t\t\tanim1 = true;\r\n\t\t},\r\n\t\tcomplete() {\r\n\t\t\tanim1 = false;\r\n\t\t\tassert.ok(!anim2, \"Queued animation isn't started early.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t});\r\n\tassert.ok(data.queueList[testQueue] !== undefined, \"Custom queue was created.\"); // Should exist, but be \"null\"\r\n\r\n\t$target.velocity(defaultProperties, {\r\n\t\tqueue: testQueue,\r\n\t\tbegin() {\r\n\t\t\tanim2 = true;\r\n\t\t\tassert.ok(anim1 === false, \"Queued animation starts after first.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tcomplete() {\r\n\t\t\tanim2 = false;\r\n\t\t},\r\n\t});\r\n\tassert.ok(data.queueList[testQueue], \"Custom queue grows.\"); // Should exist and point at the next animation\r\n\r\n\t$target.velocity(defaultProperties, {\r\n\t\tbegin() {\r\n\t\t\tanim3 = true;\r\n\t\t\tassert.ok(anim1 === true, \"Different queue animation starts in parallel.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tcomplete() {\r\n\t\t\tanim3 = false;\r\n\t\t},\r\n\t});\r\n\r\n\t$target.velocity(defaultProperties, {\r\n\t\tqueue: false,\r\n\t\tbegin() {\r\n\t\t\tassert.ok(anim1 === true, \"Queue:false animation starts in parallel.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Repeat\", (assert) => {\r\n\tasyncTests(assert, 4, (done) => {\r\n\t\tconst testOptions = {repeat: 2, delay: 100, duration: 100},\r\n\t\t\tstart = Date.now();\r\n\t\tlet begin = 0,\r\n\t\t\tcomplete = 0,\r\n\t\t\trepeat = 0;\r\n\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\trepeat: testOptions.repeat,\r\n\t\t\tdelay: testOptions.delay,\r\n\t\t\tduration: testOptions.duration,\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin++;\r\n\t\t\t},\r\n\t\t\tprogress(elements, percentComplete) {\r\n\t\t\t\tif (percentComplete === 1) {\r\n\t\t\t\t\trepeat++;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete++;\r\n\t\t\t\tassert.equal(begin, 1, \"Begin callback only called once.\");\r\n\t\t\t\tassert.equal(repeat, testOptions.repeat + 1, \"Animation repeated correct number of times (original plus repeats).\");\r\n\t\t\t\tassert.close(Date.now() - start, (testOptions.delay + testOptions.duration) * (testOptions.repeat + 1), (testOptions.repeat + 1) * 16 + 32,\r\n\t\t\t\t\t\"Repeat with 'delay' has correct duration.\");\r\n\t\t\t\tassert.equal(complete, 1, \"Complete callback only called once.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityResult} from \"velocity-animate\";\r\nimport {asyncTests, defaultProperties, getNow, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\ninterface ExtendedVelocityExtended extends VelocityResult {\r\n\t__count?: number;\r\n\t__start?: number;\r\n}\r\n\r\nQUnit.test(\"Speed\", (assert) => {\r\n\tconst delay = 200,\r\n\t\tduration = 400,\r\n\t\tstartDelay = getNow();\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity.defaults.speed = 3;\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tspeed: 5,\r\n\t\t\tbegin(elements) {\r\n\t\t\t\tassert.equal(elements.velocity.animations[0].options.speed, 5, \"Speed on options overrides default.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tbegin(elements: ExtendedVelocityExtended) {\r\n\t\t\t\telements.__start = getNow();\r\n\t\t\t},\r\n\t\t\tcomplete(elements: ExtendedVelocityExtended) {\r\n\t\t\t\tconst actual = getNow() - elements.__start,\r\n\t\t\t\t\texpected = duration / 3;\r\n\r\n\t\t\t\tassert.close(actual, expected, 32, `Velocity.defaults.speed change is respected. (\\xD73, ${Math.floor(actual - expected)}ms \\xB132ms)`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tspeed: 2,\r\n\t\t\tbegin(elements: ExtendedVelocityExtended) {\r\n\t\t\t\telements.__start = getNow();\r\n\t\t\t},\r\n\t\t\tcomplete(elements: ExtendedVelocityExtended) {\r\n\t\t\t\tconst actual = getNow() - elements.__start,\r\n\t\t\t\t\texpected = duration / 2;\r\n\r\n\t\t\t\tassert.close(actual, expected, 32, `Double speed animation lasts half as long. (\\xD72, ${Math.floor(actual - expected)}ms \\xB132ms)`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tdelay,\r\n\t\t\tspeed: 2,\r\n\t\t\tbegin(elements: ExtendedVelocityExtended) {\r\n\t\t\t\telements.__start = startDelay;\r\n\t\t\t},\r\n\t\t\tcomplete(elements: ExtendedVelocityExtended) {\r\n\t\t\t\tconst actual = getNow() - elements.__start,\r\n\t\t\t\t\texpected = (duration + delay) / 2;\r\n\r\n\t\t\t\tassert.close(actual, expected, 32, `Delayed animation includes speed for delay. (\\xD72, ${Math.floor(actual - expected)}ms \\xB132ms)`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tdelay: -delay,\r\n\t\t\tspeed: 2,\r\n\t\t\tbegin(elements: ExtendedVelocityExtended) {\r\n\t\t\t\telements.__start = startDelay;\r\n\t\t\t},\r\n\t\t\tcomplete(elements: ExtendedVelocityExtended) {\r\n\t\t\t\tconst actual = getNow() - elements.__start,\r\n\t\t\t\t\texpected = (duration - delay) / 2;\r\n\r\n\t\t\t\tassert.close(actual, expected, 32, `Negative delay animation includes speed for delay. (\\xD72, ${Math.floor(actual - expected)}ms \\xB132ms)`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tspeed: 0.5,\r\n\t\t\tbegin(elements: ExtendedVelocityExtended) {\r\n\t\t\t\telements.__start = getNow();\r\n\t\t\t},\r\n\t\t\tcomplete(elements: ExtendedVelocityExtended) {\r\n\t\t\t\tconst actual = getNow() - elements.__start,\r\n\t\t\t\t\texpected = duration * 2;\r\n\r\n\t\t\t\t// TODO: Really not happy with the allowed range - it sits around 40ms, but should be closer to 16ms\r\n\t\t\t\tassert.close(actual, expected, 64, `Half speed animation lasts twice as long. (\\xD7\\xBD, ${Math.floor(actual - expected)}ms \\xB164ms)`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), defaultProperties, {\r\n\t\t\tduration,\r\n\t\t\tspeed: 0,\r\n\t\t\tprogress(elements: ExtendedVelocityExtended, percentComplete) {\r\n\t\t\t\tif (!elements.__count) {\r\n\t\t\t\t\telements.__start = percentComplete;\r\n\t\t\t\t\telements.__count = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassert.equal(elements.__start, percentComplete, \"Frozen (speed:0) animation doesn't progress.\");\r\n\t\t\t\t\telements\r\n\t\t\t\t\t\t.velocity(\"option\", \"speed\", 1) // Just in case \"stop\" is broken\r\n\t\t\t\t\t\t.velocity(\"stop\");\r\n\r\n\t\t\t\t\tdone();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultProperties, getTarget, sleep} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Sync\", (assert) => {\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget(),\r\n\t\t\t$targetSet = [getTarget(), $target, getTarget()];\r\n\t\tlet complete = false;\r\n\r\n\t\tVelocity($target, defaultProperties, {\r\n\t\t\tduration: 300,\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($targetSet, defaultProperties, {\r\n\t\t\tsync: false,\r\n\t\t\tduration: 250,\r\n\t\t});\r\n\t\tawait sleep(275);\r\n\t\tassert.notOk(complete, \"Sync 'false' animations don't wait for completion.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget(),\r\n\t\t\t$targetSet = [getTarget(), $target, getTarget()];\r\n\t\tlet complete = false;\r\n\r\n\t\tVelocity($target, defaultProperties, {\r\n\t\t\tduration: 300,\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($targetSet, defaultProperties, {\r\n\t\t\tsync: true,\r\n\t\t\tduration: 250,\r\n\t\t\tbegin() {\r\n\t\t\t\tassert.ok(complete, \"Sync 'true' animations wait for completion.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"Command\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultOptions, defaultProperties, getPropertyValue, getTarget, sleep} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Finish\", async (assert) => {\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), \"finish\");\r\n\t\tassert.ok(true, \"Calling on an element that isn't animating doesn't cause an error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, defaultProperties, defaultOptions);\r\n\t\tVelocity($target, {top: 0}, defaultOptions);\r\n\t\tVelocity($target, {width: 0}, defaultOptions);\r\n\t\tVelocity($target, \"finish\");\r\n\t\tassert.ok(true, \"Calling on an element that is animating doesn't cause an error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 2, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet complete1 = false,\r\n\t\t\tcomplete2 = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tqueue: \"test1\",\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete1 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tqueue: \"test2\",\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete2 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, \"finish\", \"test1\");\r\n\t\tawait sleep(defaultOptions.duration as number / 2);\r\n\t\tassert.ok(complete1, \"Finish animation with correct queue.\");\r\n\t\tassert.notOk(complete2, \"Don't finish animation with wrong queue.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 3, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet begin = false,\r\n\t\t\tcomplete = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin = true;\r\n\t\t\t},\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tawait sleep(500);\r\n\t\tVelocity($target, \"finish\");\r\n\t\tassert.ok(begin, \"Finish calls 'begin()' callback without delay.\");\r\n\t\tassert.ok(complete, \"Finish calls 'complete()' callback without delay.\");\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0\", \"Finish animation with correct value.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 3, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet begin = false,\r\n\t\t\tcomplete = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tdelay: 1000,\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin = true;\r\n\t\t\t},\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tawait sleep(500);\r\n\t\tVelocity($target, \"finish\");\r\n\t\tassert.ok(begin, \"Finish calls 'begin()' callback with delay.\");\r\n\t\tassert.ok(complete, \"Finish calls 'complete()' callback with delay.\");\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0\", \"Finish animation with correct value before delay ends.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 3, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {opacity: 0})\r\n\t\t\t.velocity({opacity: 1})\r\n\t\t\t.velocity({opacity: 0.25})\r\n\t\t\t.velocity({opacity: 0.75})\r\n\t\t\t.velocity({opacity: 0.5});\r\n\t\tVelocity($target, \"finish\");\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0\", \"Finish once starts the second animation.\");\r\n\t\tVelocity($target, \"finish\");\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Finish twice starts the third animation.\");\r\n\t\tVelocity($target, \"finish\", true);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0.5\", \"Finish 'true' finishes all animations.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, getPropertyValue, getTarget, sleep} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Pause + Resume\", async (assert) => {\r\n\tasyncTests(assert, 2, (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, \"pause\");\r\n\t\tassert.ok(true, \"Calling \\\"pause\\\" on an element that isn't animating doesn't cause an error.\");\r\n\t\tVelocity($target, \"resume\");\r\n\t\tassert.ok(true, \"Calling \\\"resume\\\" on an element that isn't animating doesn't cause an error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 4, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet progress = false;\r\n\r\n\t\tVelocity($target, {opacity: 0}, {\r\n\t\t\tduration: 250,\r\n\t\t\tprogress() {\r\n\t\t\t\tprogress = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, \"pause\");\r\n\t\tawait sleep(50);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Property value unchanged after pause.\");\r\n\t\tassert.notOk(progress, \"Progress callback not run during pause.\");\r\n\t\tVelocity($target, \"resume\");\r\n\t\tawait sleep(300);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0\", \"Tween completed after pause/resume.\");\r\n\t\tassert.ok(progress, \"Progress callback run after pause.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 3, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {opacity: 0}, {duration: 250, delay: 250});\r\n\t\tVelocity($target, \"pause\");\r\n\t\tawait sleep(500);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Delayed property value unchanged after pause.\");\r\n\t\tVelocity($target, \"resume\");\r\n\t\tawait sleep(100);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Delayed tween did not start early after pause.\");\r\n\t\tawait sleep(500);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"0\", \"Delayed tween completed after pause/resume.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {opacity: 0}, {queue: \"test\", duration: 250});\r\n\t\tVelocity(\"pause\", \"test\");\r\n\t\tawait sleep(300);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Pause 'queue' works globally.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, {opacity: 0})\r\n\t\t\t.velocity(\"pause\");\r\n\t\tawait sleep(300);\r\n\t\tassert.equal(getPropertyValue($target, \"opacity\"), \"1\", \"Chained pause only pauses chained tweens.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\t// TODO: Better global tests, queue: false, named queues\r\n\r\n\t//\t/* Ensure proper behavior with queue:false  */\r\n\t//\tvar $target4 = getTarget();\r\n\t//\tVelocity($target4, {opacity: 0}, {duration: 200});\r\n\t//\r\n\t//\tvar isResumed = false;\r\n\t//\r\n\t//\tawait sleep(100);\r\n\t//\tVelocity($target4, \"pause\");\r\n\t//\tVelocity($target4, {left: -20}, {\r\n\t//\t\tduration: 100,\r\n\t//\t\teasing: \"linear\",\r\n\t//\t\tqueue: false,\r\n\t//\t\tbegin: function(elements) {\r\n\t//\t\t\tassert.ok(true, \"Animation with {queue:false} will run regardless of previously paused animations.\");\r\n\t//\t\t}\r\n\t//\t});\r\n\t//\r\n\t//\tVelocity($target4, {top: 20}, {\r\n\t//\t\tduration: 100,\r\n\t//\t\teasing: \"linear\",\r\n\t//\t\tbegin: function(elements) {\r\n\t//\t\t\tassert.ok(isResumed, \"Queued animation began after previously paused animation completed\");\r\n\t//\t\t}\r\n\t//\t});\r\n\t//\r\n\t//\tawait sleep(100);\r\n\t//\r\n\t//\tisResumed = true;\r\n\t//\tVelocity($target4, \"resume\");\r\n\t//\tawait sleep(100);\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Reverse\", (assert) => {\r\n\tconst $target = getTarget(),\r\n\t\topacity = $target.velocity(\"style\", \"opacity\"),\r\n\t\t// Browsers don't always suffix, but Velocity does.\r\n\t\twidth = $target.velocity(\"style\", \"width\") === \"0\" ? \"0px\" : $target.velocity(\"style\", \"width\");\r\n\r\n\tasyncTests(assert, 2, (done) => {\r\n\t\tVelocity($target, defaultProperties, {\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"opacity\"), defaultProperties.opacity, `Initial property #1 set correctly. (${defaultProperties.opacity})`);\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"width\"), defaultProperties.width, `Initial property #2 set correctly. (${defaultProperties.width})`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 2, (done) => {\r\n\t\tVelocity($target, \"reverse\", {\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"opacity\"), opacity, `Reversed property #1 set correctly. (${opacity})`);\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"width\"), width, `Reversed property #2 set correctly. (${width})`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tasyncTests(assert, 2, (done) => {\r\n\t\tVelocity($target, \"reverse\", {\r\n\t\t\tcomplete(elements) {\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"opacity\"), defaultProperties.opacity, `Chained reversed property #1 set correctly. (${defaultProperties.opacity})`);\r\n\t\t\t\tassert.equal(elements[0].velocity(\"style\", \"width\"), defaultProperties.width, `Chained reversed property #2 set correctly. (${defaultProperties.width})`);\r\n\r\n\t\t\t\tdone();\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\n/* Window scrolling. */\r\nQUnit.skip(\"Scroll (Window)\", (assert) => {\r\n\t//\tvar done = assert.async(4),\r\n\t//\t\t$details = $(\"#details\"),\r\n\t//\t\t$scrollTarget1 = $(\"<div>Scroll target #1. Should stop 50 pixels above this point.</div>\"),\r\n\t//\t\t$scrollTarget2 = $(\"<div>Scroll target #2. Should stop 50 pixels before this point.</div>\"),\r\n\t//\t\tscrollOffset = -50;\r\n\t//\r\n\t//\t$scrollTarget1\r\n\t//\t\t.css({position: \"relative\", top: 3000, height: 100, paddingBottom: 10000})\r\n\t//\t\t.appendTo($(\"body\"));\r\n\t//\r\n\t//\t$scrollTarget2\r\n\t//\t\t.css({position: \"absolute\", top: 100, left: 3000, width: 100, paddingRight: 15000})\r\n\t//\t\t.appendTo($(\"body\"));\r\n\t//\r\n\t//\t$scrollTarget1\r\n\t//\t\t.velocity(\"scroll\", {\r\n\t//\t\t\tduration: 500, offset: scrollOffset, complete: function() {\r\n\t//\t\t\t\tassert.equal(Math.abs(Velocity.State.scrollAnchor[Velocity.State.scrollPropertyTop]\r\n\t//\t\t\t\t - ($scrollTarget1.offset().top + scrollOffset)) <= 100, true, \"Page scrolled top with a scroll offset.\");\r\n\t//\r\n\t//\t\t\t\tdone();\r\n\t//\t\t\t}\r\n\t//\t\t})\r\n\t//\t\t.velocity({opacity: 0.5}, function() {\r\n\t//\t\t\t$details\r\n\t//\t\t\t\t.velocity({opacity: 0.5}, 500)\r\n\t//\t\t\t\t.velocity(\"scroll\", 500)\r\n\t//\t\t\t\t.velocity({opacity: 1}, 500, function() {\r\n\t//\t\t\t\t\t//alert(Velocity.State.scrollAnchor[Velocity.State.scrollPropertyTop] + \" \" + ($details.offset().top + scrollOffset))\r\n\t//\t\t\t\t\tassert.equal(Math.abs(Velocity.State.scrollAnchor[Velocity.State.scrollPropertyTop]\r\n\t//\t\t\t\t\t - ($details.offset().top + scrollOffset)) <= 100, true, \"Page scroll top was chained.\");\r\n\t//\r\n\t//\t\t\t\t\tdone();\r\n\t//\r\n\t//\t\t\t\t\t//$scrollTarget1.remove();\r\n\t//\r\n\t//\t\t\t\t\t$scrollTarget2\r\n\t//\t\t\t\t\t\t.velocity(\"scroll\", {\r\n\t//\t\t\t\t\t\t\tduration: 500, axis: \"x\", offset: scrollOffset, complete: function() {\r\n\t//\t\t\t\t\t\t\t\t/* Phones can reposition the browser's scroll position by a 10 pixels or so, so we just check for a value that's within that range. */\r\n\t//\t\t\t\t\t\t\t\tassert.equal(Math.abs(Velocity.State.scrollAnchor[Velocity.State.scrollPropertyLeft]\r\n\t//\t\t\t\t\t\t\t\t - ($scrollTarget2.offset().left + scrollOffset)) <= 100, true, \"Page scrolled left with a scroll offset.\");\r\n\t//\r\n\t//\t\t\t\t\t\t\t\tdone();\r\n\t//\t\t\t\t\t\t\t}\r\n\t//\t\t\t\t\t\t})\r\n\t//\t\t\t\t\t\t.velocity({opacity: 0.5}, function() {\r\n\t//\t\t\t\t\t\t\t$details\r\n\t//\t\t\t\t\t\t\t\t.velocity({opacity: 0.5}, 500)\r\n\t//\t\t\t\t\t\t\t\t.velocity(\"scroll\", {duration: 500, axis: \"x\"})\r\n\t//\t\t\t\t\t\t\t\t.velocity({opacity: 1}, 500, function() {\r\n\t//\t\t\t\t\t\t\t\t\tassert.equal(Math.abs(Velocity.State.scrollAnchor[Velocity.State.scrollPropertyLeft]\r\n\t//\t\t\t\t\t\t\t\t\t - ($details.offset().left + scrollOffset)) <= 100, true, \"Page scroll left was chained.\");\r\n\t//\r\n\t//\t\t\t\t\t\t\t\t\tdone();\r\n\t//\t\t\t\t\t\t\t\t});\r\n\t//\t\t\t\t\t\t});\r\n\t//\t\t\t\t});\r\n\t//\t\t});\r\n});\r\n\r\n/* Element scrolling. */\r\nQUnit.skip(\"Scroll (Element)\", (assert) => {\r\n\t//\tvar done = assert.async(2),\r\n\t//\t\t$scrollTarget1 = $(\"\\\r\n\t//\t\t\t\t\t<div id='scroller'>\\\r\n\t//\t\t\t\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\r\n\t//\t\t\t\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\r\n\t//\t\t\t\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\r\n\t//\t\t\t\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\r\n\t//\t\t\t\t\t\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\r\n\t//\t\t\t\t\t\t<div id='scrollerChild1'>\\\r\n\t//\t\t\t\t\t\t\tStop #1\\\r\n\t//\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t<div id='scrollerChild2'>\\\r\n\t//\t\t\t\t\t\t\tStop #2\\\r\n\t//\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\");\r\n\t//\r\n\t//\tassert.expect(2);\r\n\t//\t$scrollTarget1\r\n\t//\t\t.css({position: \"absolute\", backgroundColor: \"white\", top: 100, left: \"50%\", width: 500, height: 100, overflowY: \"scroll\"})\r\n\t//\t\t.appendTo($(\"body\"));\r\n\t//\r\n\t//\t/* Test with a jQuery object container. */\r\n\t//\t$(\"#scrollerChild1\").velocity(\"scroll\", {\r\n\t//\t\tcontainer: $(\"#scroller\"), duration: 750, complete: function() {\r\n\t//\t\t\t/* Test with a raw DOM element container. */\r\n\t//\t\t\t$(\"#scrollerChild2\").velocity(\"scroll\", {\r\n\t//\t\t\t\tcontainer: $(\"#scroller\")[0], duration: 750, complete: function() {\r\n\t//\t\t\t\t\t/* This test is purely visual. */\r\n\t//\t\t\t\t\tassert.ok(true);\r\n\t//\r\n\t//\t\t\t\t\t$scrollTarget1.remove();\r\n\t//\r\n\t//\t\t\t\t\tvar $scrollTarget2 = $(\"\\\r\n\t//\t\t\t\t\t\t\t\t\t<div id='scroller'>\\\r\n\t//\t\t\t\t\t\t\t\t\t\t<div id='scrollerChild1' style='float: left; width: 20%;'>\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tStop #1\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\\r\n\t//\t\t\t\t\t\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\t\t\t\t\t\t<div id='scrollerChild2' style='float: right; width: 20%;'>\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tStop #2\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\tdddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\t\t\t\t\t\teeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\r\n\t//\t\t\t\t\t\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\t\t\t\t\t</div>\\\r\n\t//\t\t\t\t\t\t\t\t\");\r\n\t//\r\n\t//\t\t\t\t\t$scrollTarget2\r\n\t//\t\t\t\t\t\t.css({position: \"absolute\", backgroundColor: \"white\", top: 100, left: \"50%\", width: 100, height: 500, overflowX: \"scroll\"})\r\n\t//\t\t\t\t\t\t.appendTo($(\"body\"));\r\n\t//\r\n\t//\t\t\t\t\t/* Test with a jQuery object container. */\r\n\t//\t\t\t\t\t$(\"#scrollerChild2\").velocity(\"scroll\", {\r\n\t//\t\t\t\t\t\taxis: \"x\", container: $(\"#scroller\"), duration: 750, complete: function() {\r\n\t//\t\t\t\t\t\t\t/* Test with a raw DOM element container. */\r\n\t//\t\t\t\t\t\t\t$(\"#scrollerChild1\").velocity(\"scroll\", {\r\n\t//\t\t\t\t\t\t\t\taxis: \"x\", container: $(\"#scroller\")[0], duration: 750, complete: function() {\r\n\t//\t\t\t\t\t\t\t\t\t/* This test is purely visual. */\r\n\t//\t\t\t\t\t\t\t\t\tassert.ok(true);\r\n\t//\r\n\t//\t\t\t\t\t\t\t\t\t$scrollTarget2.remove();\r\n\t//\r\n\t//\t\t\t\t\t\t\t\t\tdone();\r\n\t//\t\t\t\t\t\t\t\t}\r\n\t//\t\t\t\t\t\t\t});\r\n\t//\t\t\t\t\t\t}\r\n\t//\t\t\t\t\t});\r\n\t//\r\n\t//\t\t\t\t\tdone();\r\n\t//\t\t\t\t}\r\n\t//\t\t\t});\r\n\t//\t\t}\r\n\t//\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncTests, defaultOptions, defaultProperties, getPropertyValue, getTarget, sleep} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Stop\", async (assert) => {\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tVelocity(getTarget(), \"stop\");\r\n\t\tassert.ok(true, \"Calling on an element that isn't animating doesn't cause an error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, (done) => {\r\n\t\tconst $target = getTarget();\r\n\r\n\t\tVelocity($target, defaultProperties, defaultOptions);\r\n\t\tVelocity($target, {top: 0}, defaultOptions);\r\n\t\tVelocity($target, {width: 0}, defaultOptions);\r\n\t\tVelocity($target, \"stop\");\r\n\t\tassert.ok(true, \"Calling on an element that is animating doesn't cause an error.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget(),\r\n\t\t\tstartOpacity = getPropertyValue($target, \"opacity\");\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, defaultOptions);\r\n\t\tawait sleep(defaultOptions.duration as number / 2);\r\n\t\tVelocity($target, \"stop\");\r\n\t\tassert.close(parseFloat(getPropertyValue($target, \"opacity\")), parseFloat(startOpacity) / 2, 0.1, \"Animation runs until stopped.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet begin = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tdelay: 1000,\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tawait sleep(500);\r\n\t\tVelocity($target, \"stop\");\r\n\t\tassert.notOk(begin, \"Stop animation before delay ends.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 2, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet complete1 = false,\r\n\t\t\tcomplete2 = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tqueue: \"test1\",\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete1 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tqueue: \"test2\",\r\n\t\t\tcomplete() {\r\n\t\t\t\tcomplete2 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, \"stop\", \"test1\");\r\n\t\tawait sleep(defaultOptions.duration as number * 2);\r\n\t\tassert.ok(complete2, \"Stop animation with correct queue.\");\r\n\t\tassert.notOk(complete1, \"Don't stop animation with wrong queue.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 1, async (done) => {\r\n\t\tconst $target = getTarget();\r\n\t\tlet begin1 = false,\r\n\t\t\tbegin2 = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin1 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, {width: \"500px\"}, {\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin2 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tVelocity($target, \"stop\", true);\r\n\t\tawait sleep(defaultOptions.duration as number * 2);\r\n\t\tassert.notOk(begin1 || begin2, \"Stop 'true' stops all animations.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tasyncTests(assert, 2, async (done) => {\r\n\t\tconst $target = getTarget(),\r\n\t\t\tanim = Velocity($target, {opacity: [0, 1]}, {\r\n\t\t\t\tqueue: \"test\",\r\n\t\t\t\tbegin() {\r\n\t\t\t\t\tbegin1 = true;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\tlet begin1 = false,\r\n\t\t\tbegin2 = false;\r\n\r\n\t\tVelocity($target, {opacity: [0, 1]}, {\r\n\t\t\tbegin() {\r\n\t\t\t\tbegin2 = true;\r\n\t\t\t},\r\n\t\t});\r\n\t\tanim.velocity(\"stop\");\r\n\t\tawait sleep(defaultOptions.duration as number * 2);\r\n\t\tassert.notOk(begin1, \"Stop without arguments on a chain stops chain animations.\");\r\n\t\tassert.ok(begin2, \"Stop without arguments on a chain doesn't stop other animations.\");\r\n\r\n\t\tdone();\r\n\t});\r\n\r\n\tassert.expect(asyncTests());\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Tween\", (assert) => {\r\n\tconst $target1 = getTarget(),\r\n\t\tstartOpacity = $target1.style.opacity;\r\n\r\n\tassert.expect(11);\r\n\r\n\tassert.raises(() => (Velocity as any)(\"tween\", \"invalid\"), \"Invalid percentComplete throws an error.\");\r\n\tassert.raises(() => (Velocity as any)([$target1, $target1], \"tween\", \"invalid\"), \"Passing more than one target throws an error.\");\r\n\tassert.raises(() => (Velocity as any)(\"tween\", 0, [\"invalid\"]), \"Invalid propertyMap throws an error.\");\r\n\tassert.raises(() => (Velocity as any)(\"tween\", 0, \"invalid\", 1), \"Property without an element must be forcefed or throw an error.\");\r\n\r\n\tassert.equal($target1.velocity(\"tween\", 0.5, \"opacity\", [1, 0], \"linear\"), \"0.5\", \"Calling on an chain returns the correct value.\");\r\n\tassert.equal(Velocity($target1, \"tween\", 0.5, \"opacity\", [1, 0], \"linear\"), \"0.5\", \"Calling with an element returns the correct value.\");\r\n\tassert.equal(Velocity(\"tween\", 0.5, \"opacity\", [1, 0], \"linear\"), \"0.5\", \"Calling without an element returns the correct value.\");\r\n\tassert.equal($target1.style.opacity, startOpacity, \"Ensure that the element is not altered.\");\r\n\r\n\tassert.equal(typeof Velocity($target1, \"tween\", 0.5, \"opacity\", [1, 0], \"linear\"), \"string\", \"Calling a single property returns a value.\");\r\n\tassert.equal(typeof Velocity($target1, \"tween\", 0.5, {opacity: [1, 0]}, \"linear\"), \"object\", \"Calling a propertiesMap returns an object.\");\r\n\tassert.deepEqual($target1.velocity(\"tween\", 0.5, {opacity: [1, 0]}, \"linear\"), Velocity($target1, \"tween\", 0.5, {opacity: [1, 0]}, \"linear\"),\r\n\t\t\"Calling directly returns the same as a chain.\");\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"Feature\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"'velocity-animating' Classname\", (assert) => {\r\n\tconst done = assert.async(1);\r\n\r\n\tVelocity(getTarget(), defaultProperties, {\r\n\t\tbegin(elements) {\r\n\t\t\tassert.equal(/velocity-animating/.test(elements[0].className), true, \"Class added.\");\r\n\t\t},\r\n\t\tcomplete(elements) {\r\n\t\t\tassert.equal(/velocity-animating/.test(elements[0].className), false, \"Class removed.\");\r\n\t\t},\r\n\t})\r\n\t\t.then(done);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"Colors (Shorthands)\", (assert) => {\r\n\tconst $target = getTarget();\r\n\r\n\tVelocity($target, {borderColor: \"#7871c2\", color: [\"#297dad\", \"spring\", \"#5ead29\"]});\r\n\r\n\t//\tassert.equal(Data($target).style.borderColorRed.endValue, 120, \"Hex #1a component.\");\r\n\t//\tassert.equal(Data($target).style.borderColorGreen.endValue, 113, \"Hex #1b component.\");\r\n\t//\tassert.equal(Data($target).style.borderColorBlue.endValue, 194, \"Hex #1c component.\");\r\n\t//\tassert.equal(Data($target).style.colorRed.easing, \"spring\", \"Per-property easing.\");\r\n\t//\tassert.equal(Data($target).style.colorRed.startValue, 94, \"Forcefed hex #2a component.\");\r\n\t//\tassert.equal(Data($target).style.colorGreen.startValue, 173, \"Forcefed hex #2b component.\");\r\n\t//\tassert.equal(Data($target).style.colorBlue.startValue, 41, \"Forcefed hex #2c component.\");\r\n\t//\tassert.equal(Data($target).style.colorRed.endValue, 41, \"Hex #3a component.\");\r\n\t//\tassert.equal(Data($target).style.colorGreen.endValue, 125, \"Hex #3b component.\");\r\n\t//\tassert.equal(Data($target).style.colorBlue.endValue, 173, \"Hex #3c component.\");\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {Data, defaultProperties, defaultStyles, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.todo(\"Forcefeeding\", (assert) => {\r\n\t/* Note: Start values are always converted into pixels. W test the conversion ratio we already know to avoid additional work. */\r\n\tconst testStartWidth = \"1rem\",\r\n\t\ttestStartWidthToPx = \"16px\",\r\n\t\ttestStartHeight = \"10px\",\r\n\t\t$target = getTarget();\r\n\r\n\tVelocity($target, {\r\n\t\twidth: [100, \"linear\", testStartWidth],\r\n\t\theight: [100, testStartHeight],\r\n\t\topacity: [defaultProperties.opacity as any, \"easeInQuad\"],\r\n\t});\r\n\r\n\tassert.equal(Data($target).cache.width, parseFloat(testStartWidthToPx), \"Forcefed value #1 passed to tween.\");\r\n\tassert.equal(Data($target).cache.height, parseFloat(testStartHeight), \"Forcefed value #2 passed to tween.\");\r\n\tassert.equal(Data($target).cache.opacity, defaultStyles.opacity, \"Easing was misinterpreted as forcefed value.\");\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityResult} from \"velocity-animate\";\r\nimport {defaultOptions, defaultProperties, getNow, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Promises\", (assert) => {\r\n\tconst done = assert.async(10),\r\n\t\tstart = getNow();\r\n\tlet result: VelocityResult;\r\n\r\n\tassert.expect(10);\r\n\r\n\t/**********************\r\n\t Invalid Arguments\r\n\t **********************/\r\n\r\n\t((Velocity as any)() as Promise<any>)\r\n\t\t.then(() => {\r\n\t\t\tassert.notOk(true, \"Calling with no arguments should reject a Promise.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(true, \"Calling with no arguments should reject a Promise.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tVelocity(getTarget() as any)\r\n\t\t.then(() => {\r\n\t\t\tassert.notOk(true, \"Calling with no properties should reject a Promise.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(true, \"Calling with no properties should reject a Promise.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tVelocity(getTarget(), {})\r\n\t\t.then(() => {\r\n\t\t\tassert.ok(true, \"Calling with empty properties should not reject a Promise.\");\r\n\t\t}, () => {\r\n\t\t\tassert.notOk(true, \"Calling with empty properties should not reject a Promise.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tVelocity(getTarget(), {}, defaultOptions.duration)\r\n\t\t.then(() => {\r\n\t\t\tassert.ok(true, \"Calling with empty properties + duration should not reject a Promise.\");\r\n\t\t}, () => {\r\n\t\t\tassert.notOk(true, \"Calling with empty properties + duration should not reject a Promise.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\t/* Invalid arguments: Ensure an error isn't thrown. */\r\n\tVelocity(getTarget(), {} as any, \"fakeArg1\", \"fakeArg2\")\r\n\t\t.then(() => {\r\n\t\t\tassert.ok(true, \"Calling with invalid arguments should reject a Promise.\");\r\n\t\t}, () => {\r\n\t\t\tassert.notOk(true, \"Calling with invalid arguments should reject a Promise.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tresult = Velocity(getTarget(), defaultProperties, defaultOptions);\r\n\tresult\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements.length, 1, \"Calling with a single element fulfills with a single element array.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(false, \"Calling with a single element fulfills with a single element array.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\tresult.velocity(defaultProperties)\r\n\t\t.then((elements) => {\r\n\t\t\tassert.ok(getNow() - start > 2 * (defaultOptions.duration as number), \"Queued call fulfilled after correct delay.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(false, \"Queued call fulfilled after correct delay.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tresult = Velocity([getTarget(), getTarget()], defaultProperties, defaultOptions);\r\n\tresult\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements.length, 2, \"Calling with multiple elements fulfills with a multiple element array.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(false, \"Calling with multiple elements fulfills with a multiple element array.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\r\n\tconst anim = Velocity(getTarget(), defaultProperties, defaultOptions);\r\n\r\n\tanim\r\n\t\t.then(() => {\r\n\t\t\tassert.ok(getNow() - start < (defaultOptions.duration as number), \"Stop call fulfilled after correct delay.\");\r\n\t\t}, () => {\r\n\t\t\tassert.ok(false, \"Stop call fulfilled after correct delay.\");\r\n\t\t})\r\n\t\t.then(done);\r\n\tanim.velocity(\"stop\");\r\n\r\n\tPromise\r\n\t\t.all([\r\n\t\t\tVelocity(getTarget(), defaultProperties, defaultOptions).promise,\r\n\t\t\tVelocity(getTarget(), defaultProperties, defaultOptions).promise,\r\n\t\t])\r\n\t\t.then(() => {\r\n\t\t\tassert.ok(true, \"Promise.all fulfilled when all animations have finished.\");\r\n\t\t})\r\n\t\t.then(done);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, asyncTests, defaultProperties, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.todo(\"Sequences\", (assert) => {\r\n\t//\tvar done = assert.async(2),\r\n\t//\t\t$target1 = getTarget(),\r\n\t//\t\t$target2 = getTarget(),\r\n\t//\t\tredirectOptions = {duration: 1500};\r\n\t//\r\n\t//\t((window as any).jQuery || (window as any).Zepto || window).Velocity.Redirects.test = function(element, options, elementIndex, elementsLength) {\r\n\t//\t\tif (elementIndex === 0) {\r\n\t//\t\t\tassert.deepEqual(element, $target1, \"Element passed through #1.\");\r\n\t//\t\t\tassert.deepEqual(options, redirectOptions, \"Options object passed through #1.\");\r\n\t//\t\t\tassert.equal(elementIndex, 0, \"Element index passed through #1.\");\r\n\t//\t\t\tassert.equal(elementsLength, 2, \"Elements length passed through #1.\");\r\n\t//\r\n\t//\t\t\tdone();\r\n\t//\t\t} else if (elementIndex === 1) {\r\n\t//\t\t\tassert.deepEqual(element, $target2, \"Element passed through #2.\");\r\n\t//\t\t\tassert.deepEqual(options, redirectOptions, \"Options object passed through #2.\");\r\n\t//\t\t\tassert.equal(elementIndex, 1, \"Element index passed through #2.\");\r\n\t//\t\t\tassert.equal(elementsLength, 2, \"Elements length passed through #2.\");\r\n\t//\r\n\t//\t\t\tdone();\r\n\t//\t\t}\r\n\t//\t};\r\n\t//\r\n\t//\tVelocity([$target1, $target2], \"test\", redirectOptions);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {Data, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.todo(\"Value Functions\", (assert) => {\r\n\tconst testWidth = 10,\r\n\t\t$target1 = getTarget(),\r\n\t\t$target2 = getTarget();\r\n\r\n\tVelocity([$target1, $target2], {\r\n\t\twidth(i, total) {\r\n\t\t\treturn (i + 1) / total * testWidth;\r\n\t\t},\r\n\t});\r\n\r\n\tassert.equal(Data($target1).cache.width, parseFloat(testWidth as any) / 2, \"Function value #1 passed to tween.\");\r\n\tassert.equal(Data($target2).cache.width, parseFloat(testWidth as any), \"Function value #2 passed to tween.\");\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"UI Pack\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {getPropertyValue, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"Packaged Effect: slideUp/Down\", (assert) => {\r\n\tconst done = assert.async(4),\r\n\t\t$target1 = getTarget(),\r\n\t\t$target2 = getTarget(),\r\n\t\tinitialStyles = {\r\n\t\t\tdisplay: \"none\",\r\n\t\t\tpaddingTop: \"123px\",\r\n\t\t};\r\n\r\n\t$target1.style.display = initialStyles.display;\r\n\t$target1.style.paddingTop = initialStyles.paddingTop;\r\n\r\n\tVelocity($target1, \"slideDown\", {\r\n\t\tbegin(elements) {\r\n\t\t\tassert.deepEqual(elements, [$target1], \"slideDown: Begin callback returned.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tcomplete(elements) {\r\n\t\t\tassert.deepEqual(elements, [$target1], \"slideDown: Complete callback returned.\");\r\n\t\t\t//\t\t\tassert.equal(getPropertyValue($target1, \"display\"), Values.getDisplayType($target1), \"slideDown: display set to default.\");\r\n\t\t\tassert.notEqual(getPropertyValue($target1, \"height\"), 0, \"slideDown: height set.\");\r\n\t\t\tassert.equal(getPropertyValue($target1, \"paddingTop\"), initialStyles.paddingTop, \"slideDown: paddingTop set.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\t//\t}).then(function(elements) {\r\n\t\t//\t\tassert.deepEqual(elements, [$target1], \"slideDown: Promise fulfilled.\");\r\n\t\t//\r\n\t\t//\t\tdone();\r\n\t});\r\n\r\n\tVelocity($target2, \"slideUp\", {\r\n\t\tbegin(elements) {\r\n\t\t\tassert.deepEqual(elements, [$target2], \"slideUp: Begin callback returned.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tcomplete(elements) {\r\n\t\t\tassert.deepEqual(elements, [$target2], \"slideUp: Complete callback returned.\");\r\n\t\t\tassert.equal(getPropertyValue($target2, \"display\"), 0, \"slideUp: display set to none.\");\r\n\t\t\tassert.notEqual(getPropertyValue($target2, \"height\"), 0, \"slideUp: height reset.\");\r\n\t\t\tassert.equal(getPropertyValue($target1, \"paddingTop\"), initialStyles.paddingTop, \"slideUp: paddingTop reset.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\t//\t}).then(function(elements) {\r\n\t\t//\t\tassert.deepEqual(elements, [$target2], \"slideUp: Promise fulfilled.\");\r\n\t\t//\r\n\t\t//\t\tdone();\r\n\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {completeCheckDuration, defaultOptions, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"Call Options\", (assert) => {\r\n\tconst done = assert.async(2),\r\n\t\tUICallOptions1 = {\r\n\t\t\tdelay: 123,\r\n\t\t\tduration: defaultOptions.duration,\r\n\t\t\teasing: \"spring\", // Should get ignored\r\n\t\t},\r\n\t\t$target1 = getTarget();\r\n\r\n\t//assert.expect(1);\r\n\tVelocity($target1, \"transition.slideLeftIn\", UICallOptions1);\r\n\r\n\tsetTimeout(() => {\r\n\t\t// Note: We can do this because transition.slideLeftIn is composed of a single call.\r\n\t\t//\t\tassert.equal(Data($target1).opts.delay, UICallOptions1.delay, \"Whitelisted option passed in.\");\r\n\t\t//\t\tassert.notEqual(Data($target1).opts.easing, UICallOptions1.easing, \"Non-whitelisted option not passed in #1a.\");\r\n\t\t//\t\tassert.equal(!/velocity-animating/.test(Data($target1).className), true, \"Duration option passed in.\");\r\n\r\n\t\tdone();\r\n\t}, completeCheckDuration);\r\n\r\n\tconst UICallOptions2 = {\r\n\t\tstagger: 100,\r\n\t\tduration: defaultOptions.duration,\r\n\t\tbackwards: true,\r\n\t};\r\n\r\n\tconst $targets = [getTarget(), getTarget(), getTarget()];\r\n\tVelocity($targets, \"transition.slideLeftIn\", UICallOptions2);\r\n\r\n\tsetTimeout(() => {\r\n\t\t//\t\tassert.equal(Data($targets[0]).opts.delay, UICallOptions2.stagger * 2, \"Backwards stagger delay passed in #1a.\");\r\n\t\t//\t\tassert.equal(Data($targets[1]).opts.delay, UICallOptions2.stagger * 1, \"Backwards stagger delay passed in #1b.\");\r\n\t\t//\t\tassert.equal(Data($targets[2]).opts.delay, UICallOptions2.stagger * 0, \"Backwards stagger delay passed in #1c.\");\r\n\r\n\t\tdone();\r\n\t}, completeCheckDuration);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"Callbacks\", (assert) => {\r\n\tconst done = assert.async(2),\r\n\t\t$targets = [getTarget(), getTarget()];\r\n\r\n\tassert.expect(3);\r\n\tVelocity($targets, \"transition.bounceIn\", {\r\n\t\tbegin(elements) {\r\n\t\t\tassert.deepEqual(elements, $targets, \"Begin callback returned.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tcomplete(elements) {\r\n\t\t\tassert.deepEqual(elements, $targets, \"Complete callback returned.\");\r\n\r\n\t\t\tdone();\r\n\t\t},\r\n\t\t//\t}).then(function(elements) {\r\n\t\t//\t\tassert.deepEqual(elements, $targets, \"Promise fulfilled.\");\r\n\t\t//\r\n\t\t//\t\tdone();\r\n\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {asyncCheckDuration, completeCheckDuration, defaultOptions, getPropertyValue, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"In/Out\", (assert) => {\r\n\tconst done = assert.async(2),\r\n\t\t$target1 = getTarget(),\r\n\t\t$target2 = getTarget(),\r\n\t\t$target3 = getTarget(),\r\n\t\t$target4 = getTarget(),\r\n\t\t$target5 = getTarget(),\r\n\t\t$target6 = getTarget();\r\n\r\n\tVelocity($target1, \"transition.bounceIn\", defaultOptions.duration);\r\n\r\n//\tVelocity($target2, \"transition.bounceIn\", {duration: defaultOptions.duration, display: \"inline\"});\r\n//\r\n//\tVelocity($target3, \"transition.bounceOut\", defaultOptions.duration);\r\n//\r\n//\tVelocity($target4, \"transition.bounceOut\", {duration: defaultOptions.duration, display: null});\r\n//\r\n//\t$target5.style.visibility = \"hidden\";\r\n//\tVelocity($target5, \"transition.bounceIn\", {duration: defaultOptions.duration, visibility: \"visible\"});\r\n//\r\n//\t$target6.style.visibility = \"visible\";\r\n//\tVelocity($target6, \"transition.bounceOut\", {duration: defaultOptions.duration, visibility: \"hidden\"});\r\n\r\n\tassert.expect(8);\r\n\tsetTimeout(() => {\r\n\t\tassert.notEqual(getPropertyValue($target3, \"display\"), 0, \"Out: display not prematurely set to none.\");\r\n\t\tassert.notEqual(getPropertyValue($target6, \"visibility\"), \"hidden\", \"Out: visibility not prematurely set to hidden.\");\r\n\r\n\t\tdone();\r\n\t}, asyncCheckDuration);\r\n\r\n\tsetTimeout(() => {\r\n\t\t//\t\tassert.equal(getPropertyValue($target1, \"display\"), Values.getDisplayType($target1), \"In: display set to default.\");\r\n\t\tassert.equal(getPropertyValue($target2, \"display\"), \"inline\", \"In: Custom inline value set.\");\r\n\r\n\t\tassert.equal(getPropertyValue($target3, \"display\"), 0, \"Out: display set to none.\");\r\n\t\t//\t\tassert.equal(getPropertyValue($target4, \"display\"), Values.getDisplayType($target3), \"Out: No display value set.\");\r\n\r\n\t\tassert.equal(getPropertyValue($target5, \"visibility\"), \"visible\", \"In: visibility set to visible.\");\r\n\t\tassert.equal(getPropertyValue($target6, \"visibility\"), \"hidden\", \"Out: visibility set to hidden.\");\r\n\r\n\t\tdone();\r\n\t}, completeCheckDuration);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {getPropertyValue, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"RegisterEffect\", (assert) => {\r\n//\tconst done = assert.async(1),\r\n//\t\teffectDefaultDuration = 800;\r\n//\r\n//\tassert.expect(2);\r\n//\tVelocity.RegisterEffect(\"callout.twirl\", {\r\n//\t\tdefaultDuration: effectDefaultDuration,\r\n//\t\tcalls: [\r\n//\t\t\t[{rotateZ: 1080}, 0.5],\r\n//\t\t\t[{scaleX: 0.5}, 0.25, {easing: \"spring\"}],\r\n//\t\t\t[{scaleX: 1}, 0.25, {easing: \"spring\"}],\r\n//\t\t],\r\n//\t});\r\n//\r\n//\tconst $target1 = getTarget();\r\n//\tVelocity($target1, \"callout.twirl\");\r\n//\r\n//\tsetTimeout(() => {\r\n//\t\tassert.equal(parseFloat(getPropertyValue($target1, \"rotateZ\") as string), 1080, \"First call's property animated.\");\r\n//\t\tassert.equal(parseFloat(getPropertyValue($target1, \"scaleX\") as string), 1, \"Last call's property animated.\");\r\n//\r\n//\t\tdone();\r\n//\t}, effectDefaultDuration * 1.5);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity from \"velocity-animate\";\r\nimport {defaultProperties, getPropertyValue, getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"RunSequence\", (assert) => {\r\n\t//\r\n\t//\tvar done = assert.async(1),\r\n\t//\t\t$target1 = getTarget(),\r\n\t//\t\t$target2 = getTarget(),\r\n\t//\t\t$target3 = getTarget(),\r\n\t//\t\tmySequence = [\r\n\t//\t\t\t{elements: $target1, properties: {opacity: defaultProperties.opacity}},\r\n\t//\t\t\t{elements: $target2, properties: {height: defaultProperties.height}},\r\n\t//\t\t\t{\r\n\t//\t\t\t\telements: $target3, properties: {width: defaultProperties.width}, options: {\r\n\t//\t\t\t\t\tdelay: 100,\r\n\t//\t\t\t\t\tsequenceQueue: false,\r\n\t//\t\t\t\t\tcomplete: function() {\r\n\t//\t\t\t\t\t\tassert.equal(parseFloat(getPropertyValue($target1, \"opacity\") as string), defaultProperties.opacity, \"First call's property animated.\");\r\n\t//\t\t\t\t\t\tassert.equal(parseFloat(getPropertyValue($target2, \"height\") as string), defaultProperties.height, \"Second call's property animated.\");\r\n\t//\t\t\t\t\t\tassert.equal(parseFloat(getPropertyValue($target3, \"width\") as string), defaultProperties.width, \"Last call's property animated.\");\r\n\t//\r\n\t//\t\t\t\t\t\tdone();\r\n\t//\t\t\t\t\t}\r\n\t//\t\t\t\t}\r\n\t//\t\t\t}\r\n\t//\t\t];\r\n\t//\r\n\t//\tassert.expect(3);\r\n\t//\tVelocity.RunSequence(mySequence);\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nQUnit.module(\"Properties\");\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {HTMLorSVGElement} from \"velocity-animate\";\r\nimport {getTarget} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.skip(\"GenericReordering\", (assert) => {\r\n\t//\tfunction genericReordering(element: HTMLorSVGElement, propertyValue?: string): string | void {\r\n\t//\t\tif (propertyValue === undefined) {\r\n\t//\t\t\tpropertyValue = Velocity(element, \"style\", \"textShadow\");\r\n\t//\t\t\tconst split = propertyValue.split(/\\s/g),\r\n\t//\t\t\t\tfirstPart = split[0];\r\n\t//\t\t\tlet newValue = \"\";\r\n\t//\r\n\t//\t\t\tif (Velocity.CSS.ColorNames[firstPart]) {\r\n\t//\t\t\t\tsplit.shift();\r\n\t//\t\t\t\tsplit.push(firstPart);\r\n\t//\t\t\t\tnewValue = split.join(\" \");\r\n\t//\t\t\t} else if (firstPart.match(/^#|^hsl|^rgb|-gradient/)) {\r\n\t//\t\t\t\tconst matchedString = propertyValue.match(/(hsl.*\\)|#[\\da-fA-F]+|rgb.*\\)|.*gradient.*\\))\\s/g)[0];\r\n\t//\r\n\t//\t\t\t\tnewValue = propertyValue.replace(matchedString, \"\") + \" \" + matchedString.trim();\r\n\t//\t\t\t} else {\r\n\t//\t\t\t\tnewValue = propertyValue;\r\n\t//\t\t\t}\r\n\t//\t\t\treturn newValue;\r\n\t//\t\t}\r\n\t//\t}\r\n\t//\r\n\t//\tVelocity(\"registerNormalization\", \"Element\", \"genericReordering\", genericReordering);\r\n\t//\r\n\t//\tlet tests = [\r\n\t//\t\t{\r\n\t//\t\t\ttest: \"hsl(16, 100%, 66%) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px hsl(16, 100%, 66%)\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"-webkit-linear-gradient(red, yellow) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px -webkit-linear-gradient(rgba(255,0,0,1), rgba(255,255,0,1))\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"-o-linear-gradient(red, yellow) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px -o-linear-gradient(rgba(255,0,0,1), rgba(255,255,0,1))\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"-moz-linear-gradient(red, yellow) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px -moz-linear-gradient(rgba(255,0,0,1), rgba(255,255,0,1))\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"linear-gradient(red, yellow) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px linear-gradient(rgba(255,0,0,1), rgba(255,255,0,1))\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"red 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px rgba(255,0,0,1)\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"#000000 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px rgba(0,0,0,1)\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"rgb(0, 0, 0) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px rgba(0,0,0,1)\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"rgba(0, 0, 0, 1) 1px 1px 1px\",\r\n\t//\t\t\tresult: \"1px 1px 1px rgba(0,0,0,1)\",\r\n\t//\t\t}, {\r\n\t//\t\t\ttest: \"1px 1px 1px rgb(0, 0, 0)\",\r\n\t//\t\t\tresult: \"1px 1px 1px rgba(0,0,0,1)\",\r\n\t//\t\t},\r\n\t//\t];\r\n\t//\r\n\t//\tfor (let test of tests) {\r\n\t//\t\tlet element = getTarget();\r\n\t//\r\n\t//\t\telement.velocity(\"style\", \"textShadow\", test.test);\r\n\t//\t\tassert.equal(element.velocity(\"style\", \"genericReordering\"), test.result, test.test);\r\n\t//\t}\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityResult} from \"velocity-animate\";\r\nimport {getTarget, once} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Display\", (assert) => {\r\n\tconst done = assert.async(5);\r\n\r\n\tVelocity(getTarget(), \"style\", \"display\", \"none\")\r\n\t\t.velocity({display: \"block\"}, {\r\n\t\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"display\"), \"block\", \"Display:'block' was set immediately.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), \"style\", \"display\", \"none\")\r\n\t\t.velocity(\"style\", \"display\", \"auto\")\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements[0].style.display, \"block\", \"Display:'auto' was understood.\");\r\n\t\t\tassert.equal(elements.velocity(\"style\", \"display\"), \"block\", \"Display:'auto' was cached as 'block'.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), \"style\", \"display\", \"none\")\r\n\t\t.velocity(\"style\", \"display\", \"\")\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements.velocity(\"style\", \"display\"), \"block\", \"Display:'' was reset correctly.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), {display: \"none\"}, {\r\n\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\tassert.notEqual(elements.velocity(\"style\", \"display\"), \"none\", \"Display:'none' was not set immediately.\");\r\n\r\n\t\t\tdone();\r\n\t\t}),\r\n\t})\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements.velocity(\"style\", \"display\"), \"none\", \"Display:'none' was set upon completion.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n});\r\n","/*\r\n * velocity-animate (C) 2014-2018 Julian Shapiro.\r\n *\r\n * Licensed under the MIT license. See LICENSE file in the project root for details.\r\n */\r\n\r\nimport \"qunit\";\r\n\r\nimport Velocity, {VelocityResult} from \"velocity-animate\";\r\nimport {getTarget, once} from \"../utilities\";\r\nimport \"./_module\";\r\n\r\nQUnit.test(\"Visibility\", (assert) => {\r\n\tconst done = assert.async(4);\r\n\r\n\tVelocity(getTarget(), \"style\", \"visibility\", \"hidden\")\r\n\t\t.velocity({visibility: \"visible\"}, {\r\n\t\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\t\tassert.equal(elements.velocity(\"style\", \"visibility\"), \"visible\", \"Visibility:'visible' was set immediately.\");\r\n\r\n\t\t\t\tdone();\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), \"style\", \"visibility\", \"hidden\")\r\n\t\t.velocity(\"style\", \"visibility\", \"\")\r\n\t\t.then((elements) => {\r\n\t\t\t// NOTE: The test elements inherit \"hidden\", so while illogical it\r\n\t\t\t// is in fact correct.\r\n\t\t\tassert.equal(elements.velocity(\"style\", \"visibility\"), \"hidden\", \"Visibility:'' was reset correctly.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n\r\n\tVelocity(getTarget(), {visibility: \"hidden\"}, {\r\n\t\tprogress: once((elements: VelocityResult) => {\r\n\t\t\tassert.notEqual(elements.velocity(\"style\", \"visibility\"), \"visible\", \"Visibility:'hidden' was not set immediately.\");\r\n\r\n\t\t\tdone();\r\n\t\t}),\r\n\t})\r\n\t\t.then((elements) => {\r\n\t\t\tassert.equal(elements.velocity(\"style\", \"visibility\"), \"hidden\", \"Visibility:'hidden' was set upon completion.\");\r\n\r\n\t\t\tdone();\r\n\t\t});\r\n});\r\n"],"names":["$","window","jQuery","Zepto","$qunitStage","document","getElementById","defaultStyles","opacity","width","height","marginBottom","colorGreen","textShadowBlur","defaultProperties","String","defaultOptions","queue","duration","easing","begin","complete","progress","loop","delay","mobileHA","asyncCheckDuration","completeCheckDuration","IE","documentMode","i","div","createElement","innerHTML","getElementsByTagName","length","undefined","targets","asyncCount","QUnit","config","reorder","applyStartValues","element","startValues","each","property","startValue","style","Data","jquery","velocityData","getNow","performance","now","Date","getPropertyValue","Velocity","getTarget","className","color","textShadow","appendChild","push","once","func","done","result","apply","arguments","sleep","ms","Promise","resolve","setTimeout","asyncTests","assert","count","callback","oldCount","async","testDone","querySelectorAll","velocity","removeChild","pop","defaults","reset","details","console","log","total","failed","passed","runtime","module","test","testComplete","testDuration","testEasing","testOptions","expect","ok","animations","equal","options","elements","properties","newProperties","then","cache","todo","testStartValues","paddingLeft","paddingRight","marginLeft","marginTop","lineHeight","wordSpacing","backgroundColor","$target1","$target2","parseFloat","testPropertiesEndNoConvert","$target3","testPropertiesEndConvert","parentWidth","clientWidth","parentHeight","clientHeight","parentFontSize","remSize","body","$target4","parseInt","Math","floor","parentElement","offsetWidth","testPropertiesTRBL","left","$TRBLContainer","setAttribute","$target5","position","round","$target","$targetSet","deepEqual","testDelay","start","activeCall","close","time","success","e","easingBezierArray","easingBezierTestPercent","easingBezierTestValue","animation","easingSpringRK4Array","easingSpringRK4TestPercent","easingSpringRK4TestValue","easingStepArray","easingStepTestPercent","easingStepTestValue","frameRates","testFrame","frameRate","counter","fpsLimit","lastPercentComplete","percentComplete","msRemaining","testQueue","ignore","data","anim1","anim2","queueList","anim3","repeat","startDelay","speed","__start","actual","expected","__count","sync","notOk","top","complete1","complete2","skip","startOpacity","begin1","begin2","anim","raises","borderColor","testStartWidth","testStartWidthToPx","testStartHeight","all","promise","testWidth","initialStyles","display","paddingTop","notEqual","UICallOptions1","UICallOptions2","stagger","backwards","$targets","$target6","visibility"],"mappings":"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"}